extends ../../_layout/_layout_template

include ../../_layout/_layout_mixins

block title
  title Getting Started: Knockback.js Important Details

block includes
  link(rel='stylesheet', href='css/tutorial.css')
  include ../../_layout/_layout_include_demo_scripts

block navbar
  +pageNavbar('Getting Started', true)

block content
  section
    :markdown-it
      Getting Started with Knockback.js: Knockback.js Important Details
      ============================

    :markdown-it
      #Inheritance
      Some Knockback classes are meant to be inherited from. Specifically:

      * [kb.ViewModel](doc/class/kb/ViewModel.html)
      * [kb.CollectionObservable](doc/class/kb/CollectionObservable.html)
      * [kb.LocalizedObservable](doc/class/kb/LocalizedObservable.html)

      When using CoffeeScript, you can derive from a super class using:

      ```
      class YourClass extends SuperClass
        # extensions
      ```
      or when using JavaScript, you can derive from a super class using:

      ```
      var YourClass = SuperClass.extend({
        /* extensions */
      })
      ```

      For example:

    div.row-fluid
      div.span8
        ul.nav.nav-tabs
          li.active <a href="#kb_view_model_inheritance_view" data-toggle="tab">View (HTML)</a>
          li <a href="#kb_view_model_inheritance_view_model" data-toggle="tab">ViewModel (CS/JS)</a>
        div.tab-content
          div.tab-pane.active#kb_view_model_inheritance_view
            pre
              include kb_view_model_inheritance.html.txt
          div.tab-pane#kb_view_model_inheritance_view_model
            pre(data-for='cs')
              include kb_view_model_inheritance.coffee.txt

            pre(data-for='js')
              include kb_view_model_inheritance.js.txt

      div.span4
        h4 Live Result
        div.demos_result_box
          include kb_view_model_inheritance.html
          script(type='application/javascript', src='getting_started/knockback_important_details/kb_view_model_inheritance.js')

    :markdown-it
      #Specifying Mappings Paths for Nested Models

      Because Backbone.Models can have attributes than contain nested Backbone.Models or Backbone.Collections, there are times where you need to specialize the ViewModel you want to use; for example, in a model/collection hierachy with relationships. When you do need to, you can use the `factories` option when creating a [kb.ViewModel](doc/class/kb/ViewModel.html) or [kb.CollectionObservable](doc/class/kb/CollectionObservable.html)

    pre(data-for='cs')
      include kbgs_collection_observables.coffee.txt

    pre(data-for='js')
      include kbgs_collection_observables.js.txt

    :markdown-it
      Please take a look at the [Nested Model Tutorial](tutorial_nested_models.html) for more details.

      #Knockout Observables Foundations

      Many Knockback.js classes return Knockout.js observables so their dependencies/subscriptions can and should be managed like any Knockout observable. This is **very important if you choose to extend Knockback classes.

      These classes return a ko.observable instead of 'this':

      * [kb.CollectionObservable](doc/class/kb/CollectionObservable.html)
      * [kb.Observable](doc/class/kb/Observable.html)
      * [kb.DefaultWrapper](doc/class/kb/DefaultWrapper.html)
      * [kb.FormattedObservable](doc/class/kb/FormattedObservable.html)
      * [kb.LocalizedObservable](doc/class/kb/LocalizedObservable.html)
      * [kb.TriggeredObservable](doc/class/kb/TriggeredObservable.html)

      Use ko.utils.wrappedObservable(this) or return the constructor result if you dervive from them:

      ```
      YourCollectionObservable = kb.CollectionObservable.extend({
        constructor: function(collection, options) {
          return kb.CollectionObservable.prototype.constructor.call(this, collection, { view_model: YourViewModel, options: options });
        }
      });
      ```

      or

      ```
      YourCollectionObservable = kb.CollectionObservable.extend({
        constructor: function(collection, options) {
          kb.CollectionObservable.prototype.constructor.call(this, collection, { view_model: YourViewModel, options: options });
          return ko.utils.wrappedObservable(this);
        }
      });
      ```

      These classes return 'this':

      * [kb.Factory](doc/class/kb/Factory.html)
      * [kb.ModelWatcher](doc/class/kb/ModelWatcher.html)
      * [kb.Store](doc/class/kb/Store.html)
      * [kb.ViewModel](doc/class/kb/ViewModel.html)
      * [kb.Statistics](doc/class/kb/Statistics.html)

      #Backbone.Model Signatures

      Knockback.js does not require Backbone.Models or Backbone.ModelRefs for attribute watching, but requires only Backbone.Model-like signature.

      The minimal Backbone.Model signature is:

      * **Backbone.Events**: 'bind(event, callback)', 'unbind(event, callback)', and 'trigger(event, params...)'
      * **Backbone.Model**: 'get(attribute_name)'
      * **Triggering**: 'change' and/or "change:attribute_name" events when the Backbone.Models-like instance's attributes change.

      This fact is used when implementing a [Custom Locale Manager](tutorial_locale_manager.html) and could be used to port another library like Spine.js to Knockback.js.