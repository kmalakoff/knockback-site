extends ../../_layout/_layout_template

include ../../_layout/_layout_mixins

block title
  title Getting Started: Knockback.js Basics

block includes
  link(rel='stylesheet', href='css/tutorial.css')
  include ../../_layout/_layout_include_demo_scripts

block navbar
  mixin pageNavbar('Getting Started', true)

block content
  section
    h1 Getting Started with Knockback.js: Knockback.js Basics

    p You can use Knockback to bind Backbone Models/Collections to your HTML/templates (View) using Knockout. This allows server or application changes to Models/Collections to be propagated automatically to your views using `Backbone.sync`
    h2 Using with a Backbone.Model
    h3 Creating a ko.observable() for each model attribute by hand:
    p
      span You can create a ViewModel with Knockout observables for each Backbone.Model attribute using
      a(href='doc/class/kb/Observable.html') kb.observable
      span  for simple attributes (as below) or
      a(href='doc/class/kb/ViewModel.html') kb.ViewModel
      span  for Backbone.Model attributes or
      a(href='doc/class/kb/CollectionObservable.html') kb.CollectionObservable
      span .
    p Creating a ViewModel by hand is the best way to create optimized ViewModels.

    div.row-fluid
      div.span8
        ul.nav.nav-tabs
          li.active <a href="#kb_observable_view" data-toggle="tab">View (HTML)</a>
          li <a href="#kb_observable_view_model" data-toggle="tab">ViewModel (CS/JS)</a>
        div.tab-content
          div.tab-pane.active#kb_observable_view
            pre
              include kb_observable.html.txt
          div.tab-pane#kb_observable_view_model
            pre(data-for='cs')
              include kb_observable.coffee.txt

            pre(data-for='js')
              include kb_observable.js.txt

      div.span4
        h4 Live Result
        div.demos_result_box
          include kb_observable.html
          script(type='application/javascript', src='getting_started/knockback_basics/kb_observable.js')

    h3 Creating a ko.observable() automatically for each model attribute:
    p
      span Creating a ViewModel with a Knockout observable for each Backbone.Model attribute automatically using a
      a(href='doc/class/kb/ViewModel.html') kb.viewModel factory
      span  is a good way to rapidly prototype. Of course, it creates more Knockout observables than required which can be expensive in terms of unneccessary bloat.

    div.row-fluid
      div.span8
        ul.nav.nav-tabs
          li.active <a href="#kb_view_model_computed_view" data-toggle="tab">View (HTML)</a>
          li <a href="#kb_view_model_computed_view_model" data-toggle="tab">ViewModel (CS/JS)</a>
        div.tab-content
          div.tab-pane.active#kb_view_model_computed_view
            pre
              include kb_view_model_computed.html.txt
          div.tab-pane#kb_view_model_computed_view_model
            pre(data-for='cs')
              include kb_view_model_computed.coffee.txt

            pre(data-for='js')
              include kb_view_model_computed.js.txt

      div.span4
        h4 Live Result
        div.demos_result_box
          include kb_view_model_computed.html
          script(type='application/javascript', src='getting_started/knockback_basics/kb_view_model_computed.js')

    h2 Using with a Backbone.Collection
    h3 Create a kb.ViewModel automatically for each model in a collection:
    p
      span In Knockback.js, a
      a(href='doc/class/kb/CollectionObservable.html')  kb.CollectionObservable
      span  can be used with a Backbone.Collection for many different purposes
      ul
        li
          span generating/maintaining a sorted ko.observableArray of ViewModels for a list view
        li
          span rendering
          a(href='tutorial_relational_models.html')  relationships between models
        li
          span providing a selection list for
          a(href='http://knockoutjs.com/documentation/selectedOptions-binding.html')  a selectedOptions binding
          span  using Knockout.js
        li
          span to
          a(href='doc/class/kb/CollectionObservable.html#sorted_index')  sort the Backbone.Models
          span  in a way distinctive to the Backbone.Collection models array
        li
          span to
           a(href='https://github.com/kmalakoff/knockback-todos/blob/master/app/todos-classic/src/viewmodels/footer.coffee.txt')  update model counts automatically
          span  when the model count changes
        li and many more!

    div.row-fluid
      div.span8
        ul.nav.nav-tabs
          li.active <a href="#kb_collection_view" data-toggle="tab">View (HTML)</a>
          li <a href="#kb_collection_view_model" data-toggle="tab">ViewModel (CS/JS)</a>
        div.tab-content
          div.tab-pane.active#kb_collection_view
            pre
              include kb_collection.html.txt
          div.tab-pane#kb_collection_view_model
            pre(data-for='cs')
              include kb_collection.coffee.txt

            pre(data-for='js')
              include kb_collection.js.txt

      div.span4
        h4 Live Result
        div.demos_result_box
          include kb_collection.html
          script(type='application/javascript', src='getting_started/knockback_basics/kb_collection.js')