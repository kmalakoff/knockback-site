extends ../../_layout/_layout_template

include ../../_layout/_layout_mixins

block title
  title Tutorial: Getting Started

block includes
  link(rel='stylesheet', href='stylesheets/tutorial.css')
  include ../../_demos/_demos_include_knockback_scripts

block navbar
  mixin pageNavbar('Getting Started', true)

block content
  section
    h1 Tutorial: Getting Started with Knockback.js
    div
      span In essence,
      a(href='index.html')  Knockback.js
      span  bridges the dynamic DOM bindings of
      a(href='http://knockoutjs.com/')  Knockout.js
      span  with the models, computeds, and routers of
      a(href='http://documentcloud.github.com/backbone/')  Backbone.js
      span . Well, it also brings some other cool features like localization, default values, and nested view models.

    p
    h2 Useful Resources
    div Before you start with Knockback.js, we recommend you first get acquainted with Backbone.js and Knockout.js by reviewing their websites (above) and this information:
    p
      ul
        li
          a(href='http://documentcloud.github.com/backbone/docs/todos.html') Documentation of Backbone.js Todos app
          span  (but skip the section on views)
        li
          a(href='http://knockoutjs.com/examples/') Live examples of Knockout.js
        li
          a(href='http://channel9.msdn.com/Events/MIX/MIX11/FRM08') Excellent video walking through Knockout.js
    span For Knockback.js, also take a look at this
    a(href='index.html#comparison_table')  comparison table
    span  between the libraries or this
    a(href='http://www.geekdave.com/?p=79')  blog entry
    span  which provides a good introduction.

    p
    h2 Minimal Study
    h3 Knockout.js
    p
      span Knockout follows the
      a(href='http://en.wikipedia.org/wiki/Model_View_ViewModel')  Model_View_ViewModel (MVVM)
      span  design pattern meaning you specify a ViewModel (Controller) in addition to your data (Model) which encapsulates specific data and logic for your HTML/Template (View).

    div.container-fluid
      div.row-fluid
        div.span8
          h4 View (HTML):
          pre
            include ko_basic.html.txt

          h4 ViewModel and Bindings:
          pre(data-for='cs')
            include ko_basic.coffee

          pre(data-for='js')
            include ../../../public/tutorials/getting_started/ko_basic.js

        div.span4
          h4 Live Result
          div.demos_result_box
            include ko_basic.html
            script(type='application/javascript', src='tutorials/getting_started/ko_basic.js')

    strong Note:
    span  ViewModels need to be unique instances so Knockout uses a simple function with new to create an instance. Here are some equivalents:

    pre(data-for='cs').
      # Form 1: Simple function-based class
      ViewModel = (model) ->
        @first_name = ko.observable(model.first_name)
        @ # note: need to return this/@ since CoffeeScript returns the last argument automatically (which is not what we want)

      view_model = new ViewModel({first_name: "Hello"})

      # Form 2: CoffeeScript class (allows for inheritance)
      class ViewModel
        constructor: (mode) ->
          @first_name = ko.observable(model.first_name)

      view_model = new ViewModel({first_name: "Hello"})

    pre(data-for='js').
      // Simple function-based class
      var ViewModel = function(model) {
        this.first_name = ko.observable(model.first_name);
      };

      var view_model = new ViewModel({first_name: "Hello"});

    p
    h3 Backbone.js
    p
      span Backbone is an amazing
      a(href='http://en.wikipedia.org/wiki/Model_view_controller')  Model_View_Controller (MVC)
      span -
      a(href='http://documentcloud.github.com/backbone/#FAQ-mvc') inspired
      span  library that handles data (Model/Collection) synchronization with a RESTful server for
      a(href='http://en.wikipedia.org/wiki/Object-relational_mapping ')  Object_Relational_Mapping (ORM)
      span , page routing, etc. Unfortunately, their Views become complex to maintain when dynamic Model and View synchronization is required (which is why Knockback exists).
    div These are the basic Model components from Backbone used by Knockback:
    pre(data-for='cs').
      // Model
      earth = new Backbone.Model({first_name: 'Planet', last_name: 'Earth'})
      mars = new Backbone.Model({first_name: 'Planet', last_name: 'Mars'})

      // Collection
      planets = new Backbone.Collection([earth, mars])

    pre(data-for='js').
      // Model
      var earth = new Backbone.Model({first_name: 'Planet', last_name: 'Earth'});
      var mars = new Backbone.Model({first_name: 'Planet', last_name: 'Mars'});

      // Collection
      var planets = new Backbone.Collection([earth, mars]);

    div This is a Backbone router that can be used by your app:
    p Router:
    pre(data-for='cs').
      class PageRouter extends Backbone.Router
        routes:
          "earth":    "switchToEarth"     // #earth
          "mars":     "switchToMars"      // #mars

        switchToEarth: -> # do something
        switchToMars: -> # do something

      # instantiate the router and start listening for URL changes
      page_router = new PageRouter()
      Backbone.history.start()

    pre(data-for='js').
      var PageRouter = Backbone.Router.extend({
        routes: {
          "earth":    "switchToEarth",     // #earth
          "mars":     "switchToMars"      // #mars
        },

        switchToEarth: function() { /* do something */ },
        switchToMars: function() { /* do something */ }
      });

      // instantiate the router and start listening for URL changes
      var page_router = new PageRouter()
      Backbone.history.start()

    p
    h3 Knockback.js
    p You can use Knockback to bind Backbone Models/Collections to your HTML/templates (View) using Knockout. This allows server or application changes to Models/Collections to be propagated automatically to your views using `Backbone.sync`
    h4 Using with a Backbone.Model
    p Creating a ko.observable() for each model attribute by hand:

    div.container-fluid
      div.row-fluid
        div.span8
          h4 View (HTML):
          pre
            include kb_observable.html.txt

          h4 ViewModel and Bindings:
          pre(data-for='cs')
            include kb_observable.coffee

          pre(data-for='js')
            include ../../../public/tutorials/getting_started/kb_observable.js

        div.span4
          h4 Live Result
          div.demos_result_box
            include kb_observable.html
            script(type='application/javascript', src='tutorials/getting_started/kb_observable.js')

    p#view_model_no_inheritance Creating a ko.observable() automatically for each model attribute:
    div.container-fluid
      div.row-fluid
        div.span8
          h4 View (HTML):
          pre
            include kb_view_model_computed.html.txt

          h4 Models, Collection, ViewModel, and Bindings:
          pre(data-for='cs')
            include kb_view_model_computed.coffee

          pre(data-for='js')
            include ../../../public/tutorials/getting_started/kb_view_model_computed.js

        div.span4
          h4 Live Result
          div.demos_result_box
            include kb_view_model_computed.html
            script(type='application/javascript', src='tutorials/getting_started/kb_view_model_computed.js')

    h4 Using with a Backbone.Collection
    p Create a kb.ViewModel automatically for each model in a collection:

    div.container-fluid
      div.row-fluid
        div.span8
          h4 View (HTML):
          pre
            include kb_collection.html.txt

          h4 Models, Collection, ViewModel, and Bindings:
          pre(data-for='cs')
            include kb_collection.coffee

          pre(data-for='js')
            include ../../../public/tutorials/getting_started/kb_collection.js

        div.span4
          h4 Live Result
          div.demos_result_box
            include kb_collection.html
            script(type='application/javascript', src='tutorials/getting_started/kb_collection.js')

    p
    h2 Inheritance
    p Some Knockback classes are meant to be inherited. Specifically:
    ul
      li
        a(href='docs_kb_view_model.html') kb.ViewModel
      li
        a(href='docs_kb_localized_observable.html') kb.LocalizedObservable
      li
        a(href='docs_kb_ref_countable.html') kb.RefCountable
    span Re-wrtting the
    a(href='#view_model_no_inheritance')  above kb.viewModel example
    span :

    div.container-fluid
      div.row-fluid
        div.span8
          h4 View (HTML):
          pre
            include kb_view_model_inheritance.html.txt

          h4 ViewModel and Bindings:
          pre(data-for='cs')
            include kb_view_model_inheritance.coffee

          pre(data-for='js')
            include ../../../public/tutorials/getting_started/kb_view_model_inheritance.js

        div.span4
          h4 Live Result
          div.demos_result_box
            include kb_view_model_inheritance.html
            script(type='application/javascript', src='tutorials/getting_started/kb_view_model_inheritance.js')

    p
    h2 Classes vs Factory Functions
    p You may have noticed that there is both kb.viewModel(model, options) and kb.ViewModel. The reason is that to reduce the need of using `new` and to be more familiar with Knockout, there are factory methods that create the underlying classes.
    p A factory function uses new to create a new instance:
    pre(data-for='cs').
      Knockback.viewModel = (model, options) -> return new Knockback.ViewModel(model, options)

    pre(data-for='js').
      Knockback.viewModel = function(model, options) { return new Knockback.ViewModel(model, options); };
    div.alert.alert-error
      span Be careful to differentiate the <span class='label label-info'>factory</span> from the class when using
      a(href='docs_kb_utils.html#observable_instance_of')  kb.utils.observableInstanceOf(observable, class)
