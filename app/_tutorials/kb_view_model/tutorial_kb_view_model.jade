extends ../../_layout/_layout_template

include ../../_layout/_layout_mixins

block title
  title Tutorial: kb.ViewModel

block includes
  link(rel='stylesheet', href='css/tutorial.css')
  include ../../_layout/_layout_include_demo_scripts

block navbar
  mixin pageNavbar('Tutorials', true)

block content
  :markdown
    #Tutorial: kb.ViewModel

    [Knockback.js](index.html) has a helper called [kb.ViewModel](doc/classes/kb/ViewModel.html) to automatically generate observables for each attribute. Most likely you will use the [kb.viewModel(model) factory method](doc/classes/kb.html#viewModel-class) to create a kb.ViewModel.

    Unless you specify otherwise, a kb.ViewModel creates an observable for every attribute (including the id) which can cause performance issues on a page with many models. It is recommended to get started quickly with kb.ViewModels and then optimize them using [constructor options](doc/classes/kb/ViewModel.html#constructor-instance) like 'keys' or 'excludes' to limit the attributes which have kb.Observables for them or 'requires' to ensure that observables are created consistently irregardless of the Model.

    In this case, Knockback will skip creating an observable for the 'id' attribute:
  pre(data-for='cs').
    view_model = kb.viewModel(new Backbone.Model({id: 20, name: 'Bob'}), {keys: ['name']})

  pre(data-for='js').
    var view_model = kb.viewModel(new Backbone.Model({id: 20, name: 'Bob'}), {keys: ['name']});
  :markdown
    In this case, even if the 'date' attribute doesn't exist, Knockback will create both 'name' and 'date' observables:
  pre(data-for='cs').
    view_model = kb.viewModel(new Backbone.Model({name: 'Bob'}), {requires: ['name', 'date']})

  pre(data-for='js').
    var view_model = kb.viewModel(new Backbone.Model({name: 'Bob'}), {requires: ['name', 'date']});

  :markdown
    ##Attribute Type: Backbone.Model

    If Knockback encounters a attribute that is a Backbone.Model, it automatically creates a kb.ViewModel for it. Because the model can change behind the scenes, you must access the view model using the 'attribute_name()' syntax rather than as a simple property such as 'friend().name' below.

  div.row-fluid
    div.span8
      ul.nav.nav-tabs
        li.active <a href="#kbvm_bb_model_view" data-toggle="tab">View (HTML)</a>
        li <a href="#kbvm_bb_model_view_model" data-toggle="tab">ViewModel (CS/JS)</a>
      div.tab-content
        div.tab-pane.active#kbvm_bb_model_view
          pre
            include kbvm_bb_model_view.html.txt
        div.tab-pane#kbvm_bb_model_view_model
          pre(data-for='cs')
            include kbvm_bb_model_view_model_bindings.coffee.txt

          pre(data-for='js')
            include kbvm_bb_model_view_model_bindings.js.txt

    div.span4
      h4 Live Result
      div.demos_result_box
        include kbvm_bb_model_view.html
        script(type='application/javascript', src='tutorials/kb_view_model/kbvm_bb_model_view_model_bindings.js')
  :markdown
    ##Attribute Type: Backbone.Collection

    If Knockback encounters a attribute that is a Backbone.Collection, it automatically creates a kb.CollectionObservable for it and a kb.ViewModel for each of it's models. Because the collection can change behind the scenes, you must access the collection observable using the 'attribute_name()' syntax rather than as a simple property.

  div.row-fluid
    div.span8
      ul.nav.nav-tabs
        li.active <a href="#kbvm_bb_collection_view" data-toggle="tab">View (HTML)</a>
        li <a href="#kbvm_bb_collection_view_model" data-toggle="tab">ViewModel (CS/JS)</a>
      div.tab-content
        div.tab-pane.active#kbvm_bb_collection_view
          pre
            include kbvm_bb_collection_view.html.txt
        div.tab-pane#kbvm_bb_collection_view_model
          pre(data-for='cs')
            include kbvm_bb_collection_view_model_bindings.coffee.txt

          pre(data-for='js')
            include kbvm_bb_collection_view_model_bindings.js.txt

    div.span4
      h4 Live Result
      div.demos_result_box
        include kbvm_bb_collection_view.html
        script(type='application/javascript', src='tutorials/kb_view_model/kbvm_bb_collection_view_model_bindings.js')