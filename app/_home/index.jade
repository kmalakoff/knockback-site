extends ../_layout/_layout_template

include ../_layout/_layout_mixins

block title
  title Knockback.js Home

block includes
  link(rel='stylesheet', href='css/index.css')

block navbar
  div.page.github_fork_me
    include ../_layout/_layout_github_fork_me
  mixin pageNavbar('Home', false)

block header
  include ../_layout/_layout_knockback_logo

block content

  section#content.animated.fadeIn

    div.wrapped

      .content
        h2 Background
        p Both Knockout.js and Backbone.js have their strengths and weaknesses, but together they are amazing! With Knockback.js, you can use the strong ORM provided by Backbone and create dynamic views using Knockout bindings.

      .row-fluid
        .span4
          h2 Features
          ul
            li Localization
            li Knockout.js' bindings and automagical update
            li Backbone's sleek Model definition
            li Dynamic collection sorting
            li Two-way string formatting
        .span4
          h2 Dependencies
          p Knockback requires Knockout.js and Backbone.js (and therefore Underscore.js) to be already loaded on the page:
          ul
            li
              a(href='https://github.com/SteveSanderson/knockout/downloads/') Knockout.js
            li
              a(href='http://documentcloud.github.com/underscore/') Underscore.js
            li
              a(href='http://documentcloud.github.com/backbone/') Backbone.js
        .span4
          h2 Components
          p Knockback is compatible with the following components:
          ul
            li
              a(href='http://vidigami.github.io/backbone-orm/') BackboneORM <strong>(new!)</strong>
            li
              a(href='http://backbonerelational.org/') Backbone-Relational
            li
              a(href='http://dhruvaray.github.io/backbone-associations/') Backbone Associations <strong>(new!)</strong>
            li
              a(href='http://pathable.github.io/supermodel/') Supermodel.js <strong>(new!)</strong>
            li
              a(href='https://www.parse.com/') Parse
            li
              a(href='https://github.com/kmalakoff/backbone-modelref') Backbone-ModelRef
            li
              a(href='https://github.com/kmalakoff/knockback-inspector') Knockback-Inspector
            li
              a(href='https://github.com/kmalakoff/knockback-navigators/') Knockback-Navigators

      .content.row
        div.span7.wrapped
          h2 Download Latest <small>0.18.2</small>
          table.table
            thead
              tr
                th
                th <strong>Library</strong>
                th <strong>Stack</strong>
            tbody
              tr
                td Full
                td
                  ul
                    li <a href='https://raw.github.com/kmalakoff/knockback/0.18.2/knockback.js'>Development</a> <small>(dev, 82k)</small>
                    li <a href='https://raw.github.com/kmalakoff/knockback/0.18.2/knockback.min.js'>Production</a> <small>(min+gzip, 13k)</small>
                td
                  ul
                    li <a href='https://raw.github.com/kmalakoff/knockback/0.18.2/knockback-full-stack.js'>Development</a> <small>(dev, 363k)</small>
                    li <a href='https://raw.github.com/kmalakoff/knockback/0.18.2/knockback-full-stack.min.js'>Production</a> <small>(min+gzip, 39k)</small>
              tr
                td Core
                td
                  ul
                    li <a href='https://raw.github.com/kmalakoff/knockback/0.18.2/knockback-core.js'>Development</a> <small>(dev, 62k)</small>
                    li <a href='https://raw.github.com/kmalakoff/knockback/0.18.2/knockback-core.min.js'>Production</a> <small>(min+gzip, 10k)</small>
                td
                  ul
                    li <a href='https://raw.github.com/kmalakoff/knockback/0.18.2/knockback-core-stack.js'>Development</a> <small>(dev, 343k)</small>
                    li <a href='https://raw.github.com/kmalakoff/knockback/0.18.2/knockback-core-stack.min.js'>Production</a> <small>(min+gzip, 36k)</small>

          p
            div <strong>*Stack</strong> provides Underscore.js + Backbone.js + Knockout.js + Knockback.js in a single file. It is meant for getting up and running quickly in non-require, client side versions (if you use require, just require each module separately).
            br
            div <strong>*Core</strong> removes advanced features that can be included separately: localization, formatting, triggering, defaults, validation, and statistics.

        div.span3
          :markdown
            Distributions
            ---------
            * [npm registry](https://npmjs.org/package/knockback)
            * [NuGet Gallery](http://nuget.org/packages/Knockback.js)
            * [Bower](http://sindresorhus.com/bower-components/)
            * [Jam](http://jamjs.org/packages/#/details/knockback)

            Source
            ---------
            You can find the source on [Github](https://github.com/kmalakoff/knockback). To provide feedback leave a message or [create an issue](https://github.com/kmalakoff/knockback/issues).

            Release Notes
            ---------
            Please look at the [release notes](https://github.com/kmalakoff/knockback/blob/master/RELEASE_NOTES.md) if you are migrating from an earlier version.

    div#comparison_table
    p
    .content
      table.comparison
        col
        col.mid
        col
        col.ref
        thead: tr
          th Backbone.js
          th.kb.mid Knockback.js
          th Knockout.js
          th.ref(title="Notes') !
        - var count = 0;
        - var refer = 'comparison-';
        - var descr = 'View description';
        tbody
          tr
            td.yes Bullet-proof ORM
            td.done &#9754;
            td.no Weak ORM
            td.skip-cell
          tr
            td.yes Built-in Serialization / Deserialization
            td.done &#9754;
            td.no Manual serialization
            td.ref!= ref(descr, refer, 1)
          tr
            td.no: abbr(title="Model/View/Controller') MVC
            td.done &#9755;
            td.yes: abbr(title="Model/View/ViewModel') MVVM
            td.skip-cell
          tr
            td.no Low level DOM maninulation
            td.done &#9755;
            td.yes Reduced jQuery effort
            td.skip-cell
          tr
            td.no Manual view updating
            td.done &#9755;
            td.yes <code>data-bind</code> based sorcery
            td.skip-cell
          tr
            td.yes Routing and history support
            td.done &#9754;
            td.no No routing
            td.ref!= ref(descr, refer, 2)
          tr
            td.no Blurred separation between: <br> Views | Controllers
            td.own Proper separation between: <br> Models | Views | Controllers (ViewModels)
            td.no Blurred separation between: <br> Models | Controllers (ViewModels)
            td.ref!= ref(descr, refer, 3)
          tr
            td.skip-cell
            td.own.dependent Cross-view Model state synchronization
            td.skip-cell
            td.skip-cell
          tr
            td.no Messy collection/view updating
            td.own Fully sorted and updated collection views
            td.skip-cell
            td.skip-cell
          tr
            td.skip-cell
            td.own View settings and control properties
            td.skip-cell
            td.ref!= ref(descr, refer, 4)
          tr
            td.skip-cell
            td.own.dependent Localization
            td.skip-cell
            td.skip-cell
    .content.notes
      h2 Notes
      section
        #comparison-1
          :markdown
            Serialization
            =============

            As you probably know, Backbone is known to have a fantastic syncing system built
            as close as possible to the RESTful pattern. And if this is not good for your
            application you can always opt to build a custom `Backbone.sync` or, if further
            granularity is required, you can customize a Model/Collection's own `sync` function.

            Knockout.js instead does not provide such a feature, and what it offers is a simple
            plugin to map into/from any JSON source.

            Knockback uses Backbone's models and collections, and this means that all the
            serialization features we all love are still there!

        #comparison-2
          :markdown
            Routing
            =======

            In Knockback, while using Knockout.js ViewModel pattern, we developed a full
            pattern that supports Backbone's routing solution.

      section
        #comparison-3
          :markdown
            (Im)proper use of tools
            =======================

            Too often, in a large Backbone application you find yourself building up views
            with too much logic in them, almost always requiring sub-state management. This is
            actually an improper use of views, which should be as logic-less as possible.

            But you *have* to do things like that, and Backbone doesn't help the developer
            solving this (ethical?) issue.

            In Knockout.js, this is not a problem, because ViewModels differ from Views
            exactly in this: they own states, methods and properties allowing the *views* to
            be logic-less.

            So Knockout solves the blurry View/Controller issue you'll find building large
            applications with Backbone. **But** because Knockout simply provides ViewModels and no
            Models, how can you build a proper MVC/MVVM? *Backbone to the rescue!*

            And the circle is complete: Models from Backbone, and Views/ViewModels from
            Knockout.js.

      section
        #comparison-4
          :markdown
            Views' settings
            ===============

            Following MVVM principles where a ViewModel is the "View's Model", and therefore
            owns its own properties and methods which are *then* reflected in the View
            itself, Knockback ViewModels can add View setting and control properties, which are not
            (and should not be!) owned by the model.

            What does this allow? Actual settings (*eg* colors for different priorities in a
            task list) to be applied on all the associated ViewModels, or...something more
            interesting, like an design pattern for localization.

            If you consider localized labels as observed properties, then you can understand
            how Knockback provides internationalization to your applications.

    .wrapped
      .row-fluid
        .span4
          :markdown
            ##Projects
            * [Vidigami](http://www.vidigami.com/)
            * [Submit yours now](https://github.com/kmalakoff/knockback-site/issues)!

        .span3
          :markdown
            ##Frameworks
            * [django-knockback](https://github.com/thedrow/django-knockback)
            * [js.knockback](http://pypi.python.org/pypi/js.knockback)
            * [CakePHP-Knockback-Plugin](https://github.com/skie/CakePHP-Knockback-Plugin)

        .span4
          :markdown
            ##Community Extensions
            [Submit yours now](https://github.com/kmalakoff/knockback-site/issues)!

block footer
  include ../_layout/_layout_knockback_credits