extends ../../_layout/_layout_template

include ../../_layout/_layout_mixins

block title
  title Knockback.js Reference App

block includes
  link(rel='stylesheet', href='css/tutorial.css')
  include ../../_layout/_layout_include_demo_scripts

block navbar
  +pageNavbar('Getting Started', false)

block content
  section
    :markdown-it
      Knockback.js Reference App
      ==========================

      [Try the demo](http://kmalakoff.github.com/knockback-reference-app)

      Combining Backbone.js and Knockout.js with Knockback.js
      -----------------------
      As you should see by now, Backbone.js provides great models and collections ORM functionality plus single-page app routing,  Knockout.js provides very dynamic bindings between data and views using ViewModels, and Knockback.js provides the layer between the Backbone ORM and Knockout.js ViewModels.

      Because Backbone.Views and Knockout.js ViewModels provide traditional MVC Controller functionality, it is your choice on how to structure your application and whether your continue to use Backbone.Views (personally, I no longer use Backbone.Views).

      That said, I have put together a reference application that demonstrates some good principles for routing, memory management, and architectural structure. Let's get started!

      #Memory Management
      Knockback.js requires you to release your view models using 'kb.release(view_model)'. The reason for this is that kb.CollectionObservables and kb.ViewModels may have cicular references that need to be broken. Also, kb.release walks your ViewModel properties so it ensures all ko.observables, kb.observables, and the like to be properly released to avoid memory leaks.

      That said, you can largely automate this using the approach from [Knockback-Navigators.js](https://github.com/kmalakoff/knockback-navigators)!

      Knockback-Navigators.js uses an implicit memory management model based on Knockback.js conventions (based on Knockout.js functionality). When an element is created, Knockback binds Knockout's dispose node callback:

      ```
      // binds a callback to the node that releases the view model when the node is removed using ko.removeNode
      ko.utils.domNodeDisposal.addDisposeCallback(node, function() { kb.release(view_model)} );
      ```

      There are three ways to do this in Knockback:

      ```
      // Auto-released Template
      var el = kb.renderTemplate('template_name', view_model, options);

      // OR: When applying bindings
      kb.applyBindings(view_model, el);

      // OR: Manually
      kb.releaseOnNodeRemove(view_model, el);
      ```

      ###An example:

      In the reference application, I manually create the statistics view model:

      ```
      var statistics_el = kb.renderTemplate('statistics', new StatisticsViewModel());
      $('body').append(statistics_el);
      ...
      ko.releaseNode(statistics_el);
      ```

      Calling ko.releaseNode will not only clean up the element, but also call destroy() on the StatisticsViewModel.

      #Routing

      Backbone.Router is quite easy to use with a Knockback. Here is a simple example where there can only be one active page at a time:

      ```
      window.RouterBackboneJS = Backbone.Router.extend({
        constructor: function(page_navigator) {
          var _this = this; // allow 'this' inside of the callbacks

          Backbone.Router.prototype.constructor.apply(this, arguments);
          this.active_el = null;
          this.route('', null, function() {
            return _this.loadPage(kb.renderTemplate('home', {}));
          });

          this.route('things', null, function() {
            return _this.loadPage(kb.renderTemplate('things_page', new ThingsPageViewModel()));
          });

          this.route('things/:id', null, function(id) {
            var model = app.collections.things.get(id) || new Backbone.ModelRef(app.collections.things, id);
            return _this.loadPage(kb.renderTemplate('thing_page', new ThingCellViewModel(model)));
          });
        },

        loadPage: function(el) {
          // clean up both the element and the view model (see above discussion on memory management)
          if (this.active_el) {
            ko.removeNode(this.active_el);
          }
          $('.pane-navigator.page').append(this.active_el = el);
          $(el).addClass('active'); // CSS {display: none} -> {display: block}
        }
      });
      ```

      #Advanced Routing

      You can use [Knockback-Navigators.js](https://github.com/kmalakoff/knockback-navigators) to provide more exciting and interesting functionality. Here's an example with transitions and non-cached pages:

      ```
      window.RouterBackboneJSExtendedNoCache = Backbone.Router.extend({
        constructor: function(page_navigator /* instance of kb.PageNavigatorPanes */) {
          Backbone.Router.prototype.constructor.apply(this, arguments);

          this.route('', null, page_navigator.dispatcher(function() {
            return page_navigator.loadPage({
              create: function() { return kb.renderTemplate('home', {}); },
              transition: { name: 'FadeIn', duration: 1000 }
            });
          }));

          this.route('things', null, page_navigator.dispatcher(function() {
            return page_navigator.loadPage({
              create: function() { return kb.renderTemplate('things_page', new ThingsPageViewModel()); },
              transition: 'NavigationSlide'
            });
          }));

          this.route('things/:id', null, page_navigator.dispatcher(function(id) {
            var model = app.collections.things.get(id) || new Backbone.ModelRef(app.collections.things, id);
            page_navigator.loadPage({
              create: function() { return kb.renderTemplate('thing_page', new ThingCellViewModel(model)); },
              transition: 'CoverVertical'
            });
          }));
        });
      ```

      #Application Architecture

      I try to keep directories organized like in [TodoMVC](http://addyosmani.github.com/todomvc/) and [Brunch](http://brunch.io/):

      ```
      - app
        - lib - reusable libraries
        - models - all your Backbone.Views and Backbone.Collections
        - view_models - all of your Knockout ViewModels
        - views - all of your HTML Views/Templates
      ```

      In the Knockback Reference Application, I did not want the complexity of an AMD loader so I added everything to the window:

      ```
      window.ThingLinkViewModel = kb.ViewModel.extend({
        constructor: function(model, options) {
          var _this = this;
          kb.ViewModel.prototype.constructor.call(this, model, {keys: ['name', 'id'], options: options});
          this.goTo = function() { return window.location.hash = "#things/" + (_this.id()); };
          return this;
        }
      });
      ```

      If you are making a large app, you could create a single namespace like 'window.MyApp = {};' to hang all of your classes from or you could use an AMD loading solution like [Brunch]().

      #Walkthrough

      I will skip the extended application-specific code to keep things simple so you might see additional code in the actual application code.

      ##Application-Specific

      Like in Brunch, the appplication is managed using an Application class:

      ```
      window.Application = (function() {

        function Application() {
          _.bindAll(this, 'deleteAllThings', 'goToThings', 'setMode'); // binding so can be called from Views

          // placeholders for all application shared data
          this.view_models = {};
          this.collections = {};
        }

        Application.prototype.initialize = function() {
          // start Backbone History
          Backbone.history || (Backbone.history = new Backbone.History());

          // set up collections
          this.collections.things = new ThingCollection();
          this.collections.things.fetch();
        };

        Application.prototype.goToThings = function() {
          return window.location.hash = 'things';
        };

        Application.prototype.deleteAllThings = function() {
          // create a copy or else will modifying the same models array as Backbone.Collection
          var models = _.clone(this.collections.things.models);
          for (var i = 0, len = models.length; i < len; i++) {
            models[i].destroy();
          }
        };

        return Application;
      })();
      ```

      ##Models

      Thing Models use Backbone-Relational to manage ownership:

      ```
      window.Thing = Backbone.RelationalModel.extend({
        url: function() {
          return "things/" + (this.get('id'));
        },
        relations: [
          {
            type: 'HasMany',
            key: 'my_things',
            includeInJSON: 'id',
            relatedModel: 'Thing',
            reverseRelation: {
              key: 'my_owner',
              includeInJSON: 'id'
            }
          }
        ]
      });
      ```

      These relationships are then editable using HTML select and kb.CollectionObservables:

      View:

      ```
      <select multiple="multiple" data-bind="options: available_things, optionsText: 'name', selectedOptions: my_things_select"></select>
      ```

      ViewModel:

      ```
      window.ThingCellViewModel = kb.ViewModel.extend({
        constructor: function(model, options) {
          var _this = this;
          kb.ViewModel.prototype.constructor.call(this, model, {
            requires: ['id', 'name', 'caption', 'my_things', 'my_owner'],
            factories: {
              'my_things': ThingCellCollectionObservable,
              'my_owner': ThingLinkViewModel
            },
            options: options
          });

          this.my_things_select = ko.observableArray(this.my_things());

          this.available_things = new ThingCellCollectionObservable(app.collections.things, {
            filters: this.id, // exclude me from the list
            sort_attribute: 'name', // sort by name
            options: this.my_things.value().shareOptions() // Knockback needs to share the option ViewModels across collections: value() is needed to access the kb.CollectionObservable inside the kb.Observable
          });
        }
      });

      window.ThingCellCollectionObservable = kb.CollectionObservable.extend({
        constructor: function(collection, options) {
          // do not return 'this' but the ko.observableArray created by the kb.CollectionObservable constructor
          return kb.CollectionObservable.prototype.constructor.call(this, collection, { view_model: ThingCellViewModel, options: options });
        }
      });
      ```

      #Extended Features

      In addition to a the Tutorial reference application, you can find more advanced implementations that use [Knockback-Navigators.js](https://github.com/kmalakoff/knockback-navigators) for page and embedded pane transitions (under DemoMode):

      * **Panes**: adds sliding panes with embedded cells for each relationship instead of simple buttons.
      * **Page Animations**: adds transition animations without history when navigating between pages.
      * **Page Animations + History**: adds transition animations with history when navigating between pages. Note: you can re-loading the page and the transitions will work as if you navigated from the main page.
      * **Page Animations + History + No Cache**: when you use history, you need to be careful to not keep too many pages in memory. This example show you how to on-demand load pages by passing a create function instead of element to the page navigator.

      To help verify correct memory management and performance, the reference application provides some statistics helpers (under DemoMode -> Statistics):

      * **Chrome memory heap statistics**: You need to launch Chrome with the --enable-memory-info flag and also you might need to trigger heap compaction to ensure the statistics are up-to-date (for example, by using Developer Tools -> Profiles -> Take Heap Snapshot).
      * **Active ViewModels/CollectionObservables**: using the Knockback.js statistics component, you can see what which ViewModels and CollectionObservables are in memory. Note: if you do not derive from kb.ViewModel or kb.CollectionObservable, you need to add them manually using kb.Statistics.register(key, obj)
      * **Backbone.Model Events**: using the Knockback.js statistics component, you can see and reset all of the events that Knockback.js has intercepted from Backbone.js
      * **Page Cycling**: to do soak testing, you can choose the number of randomized page cycles and time per page to see the memory characteristics over time.